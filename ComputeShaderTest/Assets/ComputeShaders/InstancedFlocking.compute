// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Boid
{
    float3 position;
    float3 velocity;
    float noiseOffset;
    float frame;
	float3 padding;
};

//Time values
float time;
float deltaTime;

//Boid values
RWStructuredBuffer<Boid> boidsBuffer;
RWTexture2D<float4> heightMap;
int boidsCount;
float rotationSpeed;
float boidSpeed;
float neighborDistance;
float terrainDistance;
float boidSpeedVariation;
float3 flockPosition;

//Animation values
float boidFrameSpeed;
int numberOfFrames;

//Sphere detection
float maximumRadius;
float3 sphereCenter;

//Terrain detection
float terrainHeight;

//Returns whether or not point is within bounds
bool InsideBounds(float3 currentPos)
{
    float xValue = pow(currentPos.x - sphereCenter.x, 2);
    float yValue = pow(currentPos.y - sphereCenter.y, 2);
    float zValue = pow(currentPos.z - sphereCenter.z, 2);

    if (xValue + yValue + zValue < pow(maximumRadius, 2))
    {
        return true;
    }
    return false;
}

float hash( float n )
{
	return frac(sin(n)*43758.5453);
}

// The noise function returns a value in the range -1.0f -> 1.0f
float noise1( float3 x )
{
	float3 p = floor(x);
	float3 f = frac(x);

	f       = f*f*(3.0-2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;

	return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
					lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
				lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
					lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}

[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Cache boid
    Boid boid = boidsBuffer[id.x];

    float3 seperation = 0;
    float3 alignment = 0;
    float3 cohesion = flockPosition;
    float3 correction = 0;
    float3 groundAvoidance = 0; 

    float noise = clamp(noise1(time / 100.0 + boid.noiseOffset), -1, 1) * 2.0 - 1.0;
    float velocity = boidSpeed * (1.0 + noise * boidSpeedVariation);

    //Default 1 because of self
    uint nearbyCount = 1;

    //Check for nearby boids
    for (uint i = 0; i < (uint)boidsCount; ++i)
    {
        //Pass if boid is self
        if (i == id.x) continue;

        //Calculate distance to ground
        float groundDist = distance(boid.position.y, terrainHeight);

        //Check if it is within terrain distance
        if (groundDist < terrainDistance)
        {
            float3 groundOffset = boid.position - float3(boid.position.x, terrainHeight, boid.position.z);
            groundAvoidance += groundOffset * (1.0 / groundDist - 1.0 / neighborDistance);
        }

        //Check distance between our boid and nearby boid
        float dist = distance(boid.position, boidsBuffer[i].position);

        //If too close
        if (dist < neighborDistance)
        {
            //Calculate Seperation
            float3 offset = boid.position - boidsBuffer[i].position;
            //Ensure distance isn't zero
            dist = max(dist, 0.000001); 
            //If boid is close, increase seperation vector 
            seperation += offset * (1.0 / dist - 1.0 / neighborDistance);

            //Get the sum of each boids direction
            alignment += boidsBuffer[i].velocity;

            //Get the sum of each boids position
            cohesion += boidsBuffer[i].position;

            //Add one to count of nearby boids
            nearbyCount += 1;
        }
    }

    //Calculate average value of alignment and cohesion
    float avg = 1.0 / nearbyCount;

    alignment *= avg;
    cohesion *= avg;
    cohesion = normalize(cohesion - boid.position);

    //If boid is outside of bounds
    if (!InsideBounds(boid.position))
    {
        //Move back towards center of sphere
        correction = normalize(sphereCenter - boid.position);
    }

    //Target direction is sum of all 3 values
    float3 targetDirection = alignment + seperation + cohesion + correction + groundAvoidance;

    //Lerp towards target direction
    boid.velocity = lerp(normalize(boid.velocity), targetDirection, 0.01);

    //Apply force
    boid.position += (boid.velocity * velocity * deltaTime);

    //Update animation
    boid.frame = boid.frame + velocity * deltaTime * boidFrameSpeed;
    
    //If reaching end of frames, reset
    if (boid.frame >= numberOfFrames)
    {
        boid.frame -= numberOfFrames;
    }

    //Apply updates back to buffer
    boidsBuffer[id.x] = boid;
}